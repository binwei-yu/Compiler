extern int getarg(int);
extern float getargf(int);

# This function has two noalias parameters: $a and $b. During any execution of
# the function in which both are accessed they must point to different
# underlying variables.
def sfloat test1(noalias ref float $a, noalias ref sfloat $b, float $c) {
  # Our syntax specifies var: "$" ident, meaning that these are separate
  # tokens. It allows the programmer to do something like this... is that a
  # good idea?
  int $  x = 0;
  int $ xy = 1;
  int $xyz = 2;

  while ($xyz > 8) {
    $x = $a + $b - $c / $a * $b;
    $xy = $a == $b;
    if ($xyz > -$xy && $a < $b || ($c == $a || !$x)) {
      return $a;
    } else {
      $a = 8.5;
    }

    $b = 7.2;
  }

  return $c;
}

def int run () {
  float $a = getargf(0);
  float $b = getargf(1);
  float $c = getargf(2);

  print "initial:";
  print $a;
  print $b;
  print $c;

  test1($a, $b, $c);

  print "final:";
  print $a;
  print $b;
  print $c;

  return 0;
}

